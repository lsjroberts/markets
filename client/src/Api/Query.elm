-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (ExchangeRequiredArguments, PlayerOptionalArguments, PlayersOptionalArguments, PositionsRequiredArguments, SecuritiesOptionalArguments, SecurityRequiredArguments, agents, exchange, exchanges, orders, player, players, positions, securities, security)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


agents : SelectionSet decodesTo Api.Object.Agent -> SelectionSet (List decodesTo) RootQuery
agents object_ =
    Object.selectionForCompositeField "agents" [] object_ (identity >> Decode.list)


type alias ExchangeRequiredArguments =
    { exchange : Api.ScalarCodecs.Id }


exchange : ExchangeRequiredArguments -> SelectionSet decodesTo Api.Object.Exchange -> SelectionSet (Maybe decodesTo) RootQuery
exchange requiredArgs object_ =
    Object.selectionForCompositeField "exchange" [ Argument.required "exchange" requiredArgs.exchange (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


exchanges : SelectionSet decodesTo Api.Object.Exchange -> SelectionSet (List decodesTo) RootQuery
exchanges object_ =
    Object.selectionForCompositeField "exchanges" [] object_ (identity >> Decode.list)


orders : SelectionSet decodesTo Api.Object.Order -> SelectionSet (List decodesTo) RootQuery
orders object_ =
    Object.selectionForCompositeField "orders" [] object_ (identity >> Decode.list)


type alias PlayerOptionalArguments =
    { player : OptionalArgument Api.ScalarCodecs.Id }


player : (PlayerOptionalArguments -> PlayerOptionalArguments) -> SelectionSet decodesTo Api.Object.Player -> SelectionSet (Maybe decodesTo) RootQuery
player fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { player = Absent }

        optionalArgs =
            [ Argument.optional "player" filledInOptionals.player (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "player" optionalArgs object_ (identity >> Decode.nullable)


type alias PlayersOptionalArguments =
    { players : OptionalArgument (List Api.ScalarCodecs.Id) }


players : (PlayersOptionalArguments -> PlayersOptionalArguments) -> SelectionSet decodesTo Api.Object.Player -> SelectionSet (List decodesTo) RootQuery
players fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { players = Absent }

        optionalArgs =
            [ Argument.optional "players" filledInOptionals.players ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "players" optionalArgs object_ (identity >> Decode.list)


type alias PositionsRequiredArguments =
    { book : Api.ScalarCodecs.Id }


positions : PositionsRequiredArguments -> SelectionSet decodesTo Api.Object.Position -> SelectionSet (List decodesTo) RootQuery
positions requiredArgs object_ =
    Object.selectionForCompositeField "positions" [ Argument.required "book" requiredArgs.book (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.list)


type alias SecuritiesOptionalArguments =
    { securities : OptionalArgument (List Api.ScalarCodecs.Id) }


securities : (SecuritiesOptionalArguments -> SecuritiesOptionalArguments) -> SelectionSet decodesTo Api.Object.Security -> SelectionSet (List decodesTo) RootQuery
securities fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { securities = Absent }

        optionalArgs =
            [ Argument.optional "securities" filledInOptionals.securities ((Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "securities" optionalArgs object_ (identity >> Decode.list)


type alias SecurityRequiredArguments =
    { security : Api.ScalarCodecs.Id }


security : SecurityRequiredArguments -> SelectionSet decodesTo Api.Object.Security -> SelectionSet (Maybe decodesTo) RootQuery
security requiredArgs object_ =
    Object.selectionForCompositeField "security" [ Argument.required "security" requiredArgs.security (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)
