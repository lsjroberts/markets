-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.AgentStrategy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type AgentStrategy
    = Ipo
    | LiquidityProvider
    | TargetExposure


list : List AgentStrategy
list =
    [ Ipo, LiquidityProvider, TargetExposure ]


decoder : Decoder AgentStrategy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "IPO" ->
                        Decode.succeed Ipo

                    "LIQUIDITY_PROVIDER" ->
                        Decode.succeed LiquidityProvider

                    "TARGET_EXPOSURE" ->
                        Decode.succeed TargetExposure

                    _ ->
                        Decode.fail ("Invalid AgentStrategy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : AgentStrategy -> String
toString enum =
    case enum of
        Ipo ->
            "IPO"

        LiquidityProvider ->
            "LIQUIDITY_PROVIDER"

        TargetExposure ->
            "TARGET_EXPOSURE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe AgentStrategy
fromString enumString =
    case enumString of
        "IPO" ->
            Just Ipo

        "LIQUIDITY_PROVIDER" ->
            Just LiquidityProvider

        "TARGET_EXPOSURE" ->
            Just TargetExposure

        _ ->
            Nothing
